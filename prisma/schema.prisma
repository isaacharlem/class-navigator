// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  courses       Course[]
  chats         Chat[]
}

model Course {
  id            String    @id @default(cuid())
  name          String
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents     Document[]
  chats         Chat[]
}

model Document {
  id            String    @id @default(cuid())
  title         String
  type          String    // "text", "url", or "pdf"
  content       String?
  url           String?
  fileName      String?   // For uploaded files
  fileSize      Int?      // Size in bytes for uploaded files
  processed     Boolean   @default(false)
  courseId      String
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  vectorStore   VectorStore[]
}

model VectorStore {
  id            String    @id @default(cuid())
  documentId    String
  document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  chunk         String
  embedding     String    // Stored as a serialized vector
  createdAt     DateTime  @default(now())
}

model Chat {
  id            String    @id @default(cuid())
  title         String    @default("New Chat")
  type          String    @default("general") // general or assignment
  assignmentName String?
  courseId      String
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      Message[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Message {
  id            String    @id @default(cuid())
  content       String
  role          String    // user or assistant
  chatId        String
  chat          Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  citations     Citation[]
  createdAt     DateTime  @default(now())
}

model Citation {
  id            String    @id @default(cuid())
  messageId     String
  message       Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  documentId    String
  sourceText    String
  createdAt     DateTime  @default(now())
}
